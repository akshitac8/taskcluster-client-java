{
  "name": "Taskcluster-client-java",
  "tagline": "A java client for interfacing with taskcluster server components",
  "body": "# taskcluster-client-java\r\n<img hspace=\"20\" align=\"left\" src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.mozilla.taskcluster/taskcluster-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.mozilla.taskcluster/taskcluster-client/)\r\n[![Build Status](https://travis-ci.org/taskcluster/taskcluster-client-java.svg?branch=master)](http://travis-ci.org/taskcluster/taskcluster-client-java)\r\n[![JavaDoc](https://img.shields.io/badge/javadoc-reference-blue.svg)](http://taskcluster.github.io/taskcluster-client-java/apidocs)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/taskcluster-client-java/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/taskcluster-client-java?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](http://mozilla.org/MPL/2.0)\r\n\r\nA java port of taskcluster-client.\r\n\r\n## HTTP APIs\r\n\r\n* [Auth](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/auth/Auth.html)  \r\n  Authentication related API end-points for taskcluster.\r\n\r\n* [AWS Provisioner](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/awsprovisioner/AwsProvisioner.html)  \r\n  The AWS Provisioner is responsible for provisioning instances on EC2 for use in TaskCluster.\r\n\r\n* [Github](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/github/Github.html)  \r\n  The Github service is responsible for publishing pulse messages for supported Github events.\r\n\r\n* [Hooks](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/hooks/Hooks.html)  \r\n  Hooks are a mechanism for creating tasks in response to events.\r\n\r\n* [Index](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/index/Index.html)  \r\n  The task index is responsible for indexing tasks.\r\n\r\n* [Login](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/login/Login.html)  \r\n  The Login service serves as the interface between external authentication systems and TaskCluster credentials.\r\n\r\n* [Notify](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/notify/Notify.html)  \r\n  The notification service listens for tasks with associated notifications and sends them.\r\n\r\n* [Purge Cache](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/purgecache/PurgeCache.html)  \r\n  The purge-cache service is responsible for publishing a pulse message for workers, so they can purge cache upon request.\r\n\r\n* [Queue](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/queue/Queue.html)  \r\n  The queue is responsible for accepting tasks and track their state as they are executed by workers.\r\n\r\n* [Scheduler](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/scheduler/Scheduler.html)  \r\n  The task-graph scheduler is responsible for accepting task-graphs and scheduling tasks for evaluation by the queue as their dependencies are satisfied.\r\n\r\n* [Secrets](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/secrets/Secrets.html)  \r\n  The secrets service is responsible for managing secure data in TaskCluster.\r\n\r\n### AMQP APIs\r\n\r\nCurrently AMQP APIs are not supported in the java client.\r\n\r\n### Client utilities\r\n\r\n* [Credentials](http://taskcluster.github.io/taskcluster-client-java/apidocs/org/mozilla/taskcluster/client/Credentials.html)  \r\n  For credentials operations, such as:\r\n    * Creating temporary credentials from permanent credentials\r\n    * Limiting credentials to a set of authorized scopes\r\n\r\n## Using\r\n\r\n### Maven\r\n\r\nIn order to use this library from your maven project, simply include it as a project dependency:\r\n\r\n```\r\n<project>\r\n  ...\r\n  <dependencies>\r\n    ...\r\n    <dependency>\r\n      <groupId>org.mozilla.taskcluster</groupId>\r\n      <artifactId>taskcluster-client</artifactId>\r\n    </dependency>\r\n  </dependencies>\r\n</project>\r\n```\r\n\r\nThe taskcluster-client artifacts are now available from the [maven central repository](http://central.sonatype.org/):\r\n\r\n* [Search Results](http://search.maven.org/#search|gav|1|g%3A%22org.mozilla.taskcluster%22%20AND%20a%3A%22taskcluster-client%22)\r\n* [Directory Listing](https://repo1.maven.org/maven2/org/mozilla/taskcluster/taskcluster-client/)\r\n\r\n## Calling API End-Points\r\n\r\nTo invoke an API end-point, instantiate one of the HTTP API classes (from\r\nsection [HTTP APIs](#http-apis)).  In the following example we instantiate an\r\ninstance of the `Queue` client class and use it to create a task.\r\n\r\n```java\r\nimport org.mozilla.taskcluster.client.*;\r\nimport org.mozilla.taskcluster.client.queue.*;\r\n\r\n...\r\n\r\n\t// Create credentials, e.g. from environment variables...\r\n    Credentials creds = new Credentials(\r\n        System.getenv(\"TASKCLUSTER_CLIENT_ID\"),\r\n        System.getenv(\"TASKCLUSTER_ACCESS_TOKEN\"),\r\n        System.getenv(\"TASKCLUSTER_CERTIFICATE\")\r\n    );\r\n\r\n    // Instantiate the Queue client class\r\n    Queue queue = new Queue(creds);\r\n\r\n    // Supply a unique task name\r\n    String taskId = \"...\";\r\n\r\n    // Define the task\r\n    TaskDefinition td = new TaskDefinition();\r\n\r\n    // Set properties, as required...\r\n    td.created = new java.util.Date();\r\n    td.provisionerId = \"...\";\r\n    td.routes = new String[] { \"...\", \"...\", \"...\" };\r\n    td.XYZ = ...\r\n\r\n    // Execute the API call\r\n    try {\r\n        TaskStatusResponse tsr = queue.defineTask(taskId, td).responsePayload;\r\n\r\n        // Process API response\r\n        System.out.println(\"State is \" + tsr.status.state);\r\n\r\n    } catch (APICallFailure e) {\r\n        // handle exception ...\r\n    }\r\n\r\n...\r\n```\r\n## Temporary credentials\r\n\r\nYou can generate temporary credentials from permanent credentials using the\r\njava client. This may be useful if you wish to issue credentials to a third\r\nparty. See https://docs.taskcluster.net/manual/apis/temporary-credentials for\r\nmore information. Both named and unnamed temporary credentials are supported,\r\nalthough named credentials are preferred if you are not sure which type to use.\r\n\r\n### Example\r\n\r\n```java\r\npackage org.mozilla.taskcluster;\r\n\r\nimport java.util.Date;\r\n\r\nimport org.mozilla.taskcluster.client.APICallFailure;\r\nimport org.mozilla.taskcluster.client.CallSummary;\r\nimport org.mozilla.taskcluster.client.Credentials;\r\nimport org.mozilla.taskcluster.client.EmptyPayload;\r\nimport org.mozilla.taskcluster.client.InvalidOptionsException;\r\nimport org.mozilla.taskcluster.client.queue.ListArtifactsResponse;\r\nimport org.mozilla.taskcluster.client.queue.ListArtifactsResponse.Artifacts;\r\nimport org.mozilla.taskcluster.client.queue.Queue;\r\n\r\n/**\r\n * This simple demo lists the artifacts in run 0 of task U7On2dUVS9KlEgw7LUaCMQ.\r\n * It creates permanent credentials from environment variables\r\n * TASKCLUSTER_CLIENT_ID and TASKCLUSTER_ACCESS_TOKEN, and then creates\r\n * temporary credentials, valid for 24 hours, from these permanent credentials.\r\n * It queries the Queue using the temporary credentials, and with limited\r\n * authorized scopes.\r\n *\r\n * Note, the queue.listArtifacts(...) call doesn't require any scopes, the\r\n * generation of temporary credentials, and limiting via authorized scopes is\r\n * purely illustrative. The TASKCLUSTER_CLIENT_ID must satisfy\r\n * auth:create-client:demo-client/taskcluster-client-java, though.\r\n */\r\npublic class Demo {\r\n    public static void main(String[] args) {\r\n        Credentials permCreds = new Credentials(\r\n            System.getenv(\"TASKCLUSTER_CLIENT_ID\"),\r\n            System.getenv(\"TASKCLUSTER_ACCESS_TOKEN\")\r\n        );\r\n        Date now = new Date();\r\n        try {\r\n            Credentials tempCreds = permCreds.createTemporaryCredentials(\r\n                \"demo-client/taskcluster-client-java\",\r\n                new String[] {\r\n                    \"assume:legacy-permacred\"\r\n                },\r\n                // valid immediately\r\n                now,\r\n                // expire in 24 hours\r\n                new Date(now.getTime() + 1000 * 60 * 60 * 24)\r\n            );\r\n            tempCreds.authorizedScopes = new String[] { \"queue:get-artifact:private/build/*\" };\r\n            Queue queue = new Queue(tempCreds);\r\n            CallSummary<EmptyPayload, ListArtifactsResponse> cs = queue.listArtifacts(\"U7On2dUVS9KlEgw7LUaCMQ\", \"0\");\r\n            ListArtifactsResponse artifacts = cs.responsePayload;\r\n            System.out.println(\"Artifacts:\");\r\n            for (Artifacts artifact : artifacts.artifacts) {\r\n                System.out.println(\"  * \" + artifact.name);\r\n            }\r\n            System.out.println(\"Done.\");\r\n        } catch (InvalidOptionsException e) {\r\n            System.err.println(\"Could not create temporary credentials\");\r\n            e.printStackTrace();\r\n        } catch (APICallFailure e) {\r\n            System.err.println(\"Could not query the Queue service\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSee the [HTTP API javadocs](#http-apis) for more information, or browse the [unit\r\ntests](https://github.com/taskcluster/taskcluster-client-java/tree/master/src/test/java/org/mozilla/taskcluster)\r\nfor further examples.\r\n\r\n## Building\r\n\r\nThe java libraries provided by this client are auto-generated in\r\n[go](https://golang.org/) (not java!) using the schemas defined in\r\nhttp://references.taskcluster.net/manifest.json combined with supplementary\r\ninformation stored in\r\n[apis.json](https://github.com/taskcluster/taskcluster-client-java/blob/master/codegenerator/model/apis.json).\r\n\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/taskcluster-client-java?status.svg)](https://godoc.org/github.com/taskcluster/taskcluster-client-java)\r\n\r\nIn order to completely regenerate all of the HTTP and AMQP libraries, please run\r\n[build.sh](https://github.com/taskcluster/taskcluster-client-java/blob/master/build.sh)\r\nfound in the top level directory. This will completely regenerate the library.\r\nPlease note you will need an active internet connection as the build process\r\nmust download several json files and schemas in order to build the library. The\r\ncode generation requires go (golang) is installed on your system, and java, and\r\napache maven. All three need to be setup and configured correctly.\r\n\r\nThe code which generates the library can all be found under the top level\r\n[codegenerator](https://github.com/taskcluster/taskcluster-client-java/tree/master/codegenerator)\r\ndirectory.\r\n\r\n## Contributing\r\n\r\nContributions are welcome. Please fork, and issue a Pull Request back with an\r\nexplanation of your changes.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}