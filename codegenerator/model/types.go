// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package model

import "encoding/json"

type (
	// Reference of methods implemented by API
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#
	APIReferenceFile struct {

		// Link to schema for this reference. That is a link to this very document. Typically used to identify what kind of reference this file is.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/$schema
		Schema string `json:"$schema"`

		// BaseUrl for all _routes_ described in this document
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/baseUrl
		BaseURL string `json:"baseUrl"`

		// API description in markdown
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/description
		Description string `json:"description"`

		// Array of methods in this reference
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries
		Entries []APIEntry `json:"entries"`

		// API title in markdown
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/title
		Title string `json:"title"`

		// API reference version
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/version
		Version json.RawMessage `json:"version"`
	}

	Entry struct {

		// Arguments from `route` that must be replaced, they'll appear wrapped in brackets inside `route`.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/args
		Args []string `json:"args"`

		// Description (ie. documentation) for the API entry
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/description
		Description string `json:"description"`

		// JSON schema for input, if input is taken otherwise not present.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/input
		Input string `json:"input,omitempty"`

		// HTTP method (verb) used to access the function
		//
		// Possible values:
		//   * "get"
		//   * "post"
		//   * "put"
		//   * "head"
		//   * "delete"
		//   * "options"
		//   * "trace"
		//   * "copy"
		//   * "lock"
		//   * "mkcol"
		//   * "move"
		//   * "purge"
		//   * "propfind"
		//   * "proppatch"
		//   * "unlock"
		//   * "report"
		//   * "mkactivity"
		//   * "checkout"
		//   * "merge"
		//   * "m-search"
		//   * "notify"
		//   * "subscribe"
		//   * "unsubscribe"
		//   * "patch"
		//   * "search"
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/method
		Method string `json:"method"`

		// Name of the `function` this is a stable identifier for use in auto-generated client libraries
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/name
		Name string `json:"name"`

		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/output
		Output string `json:"output,omitempty"`

		// List of accepted query-string parameters, these are always optional.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/query
		Query []string `json:"query,omitempty"`

		// Route for the call, note that arguments wrapped with brackets, like `/v1/user/<userId>/` must be replaced. And the route must be appended to the `baseUrl`
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/route
		Route string `json:"route"`

		// Scope expression template specifying required scopes for a method. Not provided if authentication isn't required.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/scopes
		Scopes ScopeExpressionTemplate `json:"scopes,omitempty"`

		// Stability level of the API
		//
		// Possible values:
		//   * "deprecated"
		//   * "experimental"
		//   * "stable"
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/stability
		Stability string `json:"stability"`

		// Title of API entry
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/title
		Title string `json:"title"`

		// Type of entry, currently only `function`.
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/properties/entries/items/properties/type
		Type string `json:"type"`
	}

	// AllOf objects will evaluate to true if all subexpressions are true
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[2]
	AllOf struct {

		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[2]/properties/AllOf
		AllOf []ScopeExpressionTemplate `json:"AllOf"`
	}

	// AnyOf objects will evaluate to true if any subexpressions are true
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[1]
	AnyOf struct {

		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[1]/properties/AnyOf
		AnyOf []ScopeExpressionTemplate `json:"AnyOf"`
	}

	// for/each/in objects will replace themselves with an array of basic scopes. They will be flattened into the array this object is a part of.
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[4]
	ForEachIn struct {

		// Syntax:     ^[\x20-\x7e]*$
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[4]/properties/each
		Each string `json:"each"`

		// Syntax:     ^[\x20-\x7e]*$
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[4]/properties/for
		For string `json:"for"`

		// Syntax:     ^[\x20-\x7e]*$
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[4]/properties/in
		In string `json:"in"`
	}

	// if/then objects will replace themselves with the contents of then if the `if` is true
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[3]
	IfThen struct {

		// Syntax:     ^[\x20-\x7e]*$
		//
		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[3]/properties/if
		If string `json:"if"`

		// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[3]/properties/then
		Then ScopeExpressionTemplate `json:"then"`
	}

	// The most basic element of a scope expression
	//
	// Syntax:     ^[\x20-\x7e]*$
	//
	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate/oneOf[0]
	RequiredScope string

	// See http://schemas.taskcluster.net/base/v1/api-reference.json#/definitions/scopeExpressionTemplate
	ScopeExpressionTemplate struct {
		RawMessage json.RawMessage
		// One of:
		//   * "AllOf"
		//   * "AnyOf"
		//   * "ForEachIn"
		//   * "IfThen"
		//   * "RequiredScope"
		Type          string
		AllOf         *AllOf
		AnyOf         *AnyOf
		ForEachIn     *ForEachIn
		IfThen        *IfThen
		RequiredScope *RequiredScope
	}
)
